{"ast":null,"code":"var _jsxFileName = \"/Users/kyoorim/Desktop/practice-coding/udemy-06-HTTP/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\"; // 버전 1  - 더 간단한 표현\n\nfunction App() {\n  const [movies, setMovies] = useState([]); // 화면 불러오고 있는 중에 로딩 표시 처리\n\n  const [isLoading, setIsLoading] = useState(false); //에러상태 처리\n\n  const [error, setError] = useState(null); // 최초 로딩 시 영화 리스트 보이도록 함\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, []);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null); // try {} catch{}로 오류 처리 해주기\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong\");\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message); // \"Something went wrong\"\n    }\n\n    setIsLoading(false);\n  } // 버전 2\n  // function fetchMoviesHandler() {\n  //   // fetch('url', {method:GET}) 두번째 인자의 디폴트 값이 GET이므로 여기서는 굳이 쓸 필요가 없음\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       //https://swapi.dev/api/films 여기서 제공하는 프로퍼티명이랑 Movie.js에서 props뒤에 쓴 형식이 다름. fetch로 받아올때 Movie.js에서 쓰인 형식으로 바꿔서 받아오는 처리 해주기!\n  //       const transformedMovies = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovies(transformedMovies);\n  //     });\n  // }\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, \"Found no movies\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","content","length"],"sources":["/Users/kyoorim/Desktop/practice-coding/udemy-06-HTTP/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\n// 버전 1  - 더 간단한 표현\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  // 화면 불러오고 있는 중에 로딩 표시 처리\n  const [isLoading, setIsLoading] = useState(false);\n  //에러상태 처리\n  const [error, setError] = useState(null);\n\n  // 최초 로딩 시 영화 리스트 보이도록 함\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, []);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n\n    // try {} catch{}로 오류 처리 해주기\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films\");\n      if (!response.ok) {\n        throw new Error(\"Something went wrong\");\n      }\n      const data = await response.json();\n\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message); // \"Something went wrong\"\n    }\n    setIsLoading(false);\n  }\n\n  // 버전 2\n  // function fetchMoviesHandler() {\n  //   // fetch('url', {method:GET}) 두번째 인자의 디폴트 값이 GET이므로 여기서는 굳이 쓸 필요가 없음\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       //https://swapi.dev/api/films 여기서 제공하는 프로퍼티명이랑 Movie.js에서 props뒤에 쓴 형식이 다름. fetch로 받아올때 Movie.js에서 쓰인 형식으로 바꿔서 받아오는 처리 해주기!\n  //       const transformedMovies = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovies(transformedMovies);\n  //     });\n  // }\n\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n\n  let content = <p>Found no movies</p>;\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP,C,CAEA;;AACA,SAASC,GAAT,GAAe;EACb,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC,CADa,CAEb;;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C,CAHa,CAIb;;EACA,MAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC,CALa,CAOb;;EACAC,SAAS,CAAC,MAAM;IACdS,kBAAkB;EACnB,CAFQ,EAEN,EAFM,CAAT;;EAIA,eAAeA,kBAAf,GAAoC;IAClCH,YAAY,CAAC,IAAD,CAAZ;IACAE,QAAQ,CAAC,IAAD,CAAR,CAFkC,CAIlC;;IACA,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;;MACA,IAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;MACD;;MACD,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;MAEA,MAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,SAAD,IAAe;QACxD,OAAO;UACLC,EAAE,EAAED,SAAS,CAACE,UADT;UAELC,KAAK,EAAEH,SAAS,CAACG,KAFZ;UAGLC,WAAW,EAAEJ,SAAS,CAACK,aAHlB;UAILC,WAAW,EAAEN,SAAS,CAACO;QAJlB,CAAP;MAMD,CAPyB,CAA1B;MAQAtB,SAAS,CAACY,iBAAD,CAAT;IACD,CAhBD,CAgBE,OAAOT,KAAP,EAAc;MACdC,QAAQ,CAACD,KAAK,CAACoB,OAAP,CAAR,CADc,CACW;IAC1B;;IACDrB,YAAY,CAAC,KAAD,CAAZ;EACD,CArCY,CAuCb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,IAAIsB,OAAO,gBAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,qBAAd;;EACA,IAAIzB,MAAM,CAAC0B,MAAP,GAAgB,CAApB,EAAuB;IACrBD,OAAO,gBAAG,oBAAC,UAAD;MAAY,MAAM,EAAEzB,MAApB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAV;EACD;;EAED,IAAII,KAAJ,EAAW;IACTqB,OAAO,gBAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAIrB,KAAJ,CAAV;EACD;;EAED,IAAIF,SAAJ,EAAe;IACbuB,OAAO,gBAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAAV;EACD;;EAED,oBACE,oBAAC,KAAD,CAAO,QAAP;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAQ,OAAO,EAAEnB,kBAAjB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kBADF,CADF,eAIE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAUmB,OAAV,CAJF,CADF;AAQD;;AAED,eAAe1B,GAAf"},"metadata":{},"sourceType":"module"}