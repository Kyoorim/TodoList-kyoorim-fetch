{"ast":null,"code":"var _jsxFileName = \"/Users/kyoorim/Desktop/practice-coding/udemy-06-HTTP/src/App.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]); // 화면 불러오고 있는 중에 로딩 표시 처리\n\n  const [isLoading, setIsLoading] = useState(false); //에러상태 처리\n\n  const [error, setError] = useState(null); //------useCallback을 사용한 경우\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null); // try {} catch{}로 오류 처리 해주기\n    // GET요청 관련 fetch\n\n    try {\n      const response = await fetch(\"https://udemy-react-http-77f19-default-rtdb.firebaseio.com/movies.json\"); // firebase 링크끝에 /movies.json이라고 추가함\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong\");\n      }\n\n      const data = await response.json();\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message); // \"Something went wrong\"\n    }\n\n    setIsLoading(false);\n  }, []); // 최초 로딩 시 영화 리스트 보이도록 함\n  // 의존성 배열에 [fetchMoviesHandler]을 넣어주면 변화가 있을때마다 업데이트가 될수 있는 반면 infinite loop를 만들게 될수도 있다.\n  // 이를 방지하기 위해 useCallback을 사용한다\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]); // POST 요청 관련 fetch\n\n  async function addMovieHandler(movie) {\n    const response = await fetch(\"https://udemy-react-http-77f19-default-rtdb.firebaseio.com/movies.json\", {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    console.log(data); // 결과값: {name: '-N9a7yhrMvCi1GK_E4-1'} // firebase에서 정한 아이디\n  } // -----1. useCallback 사용하지 않은 경우!\n  // async function fetchMoviesHandler() {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   // try {} catch{}로 오류 처리 해주기\n  //   try {\n  //     const response = await fetch(\"https://swapi.dev/api/films\");\n  //     if (!response.ok) {\n  //       throw new Error(\"Something went wrong\");\n  //     }\n  //     const data = await response.json();\n  //     const transformedMovies = data.results.map((movieData) => {\n  //       return {\n  //         id: movieData.episode_id,\n  //         title: movieData.title,\n  //         openingText: movieData.opening_crawl,\n  //         releaseDate: movieData.release_date,\n  //       };\n  //     });\n  //     setMovies(transformedMovies);\n  //   } catch (error) {\n  //     setError(error.message); // \"Something went wrong\"\n  //   }\n  //   setIsLoading(false);\n  // }\n  //---------.then 사용한 경우\n  // function fetchMoviesHandler() {\n  //   // fetch('url', {method:GET}) 두번째 인자의 디폴트 값이 GET이므로 여기서는 굳이 쓸 필요가 없음\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       //https://swapi.dev/api/films 여기서 제공하는 프로퍼티명이랑 Movie.js에서 props뒤에 쓴 형식이 다름. fetch로 받아올때 Movie.js에서 쓰인 형식으로 바꿔서 받아오는 처리 해주기!\n  //       const transformedMovies = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovies(transformedMovies);\n  //     });\n  // }\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, \"Found no movies\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","loadedMovies","key","push","id","title","openingText","releaseDate","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","content","length"],"sources":["/Users/kyoorim/Desktop/practice-coding/udemy-06-HTTP/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  // 화면 불러오고 있는 중에 로딩 표시 처리\n  const [isLoading, setIsLoading] = useState(false);\n  //에러상태 처리\n  const [error, setError] = useState(null);\n\n  //------useCallback을 사용한 경우\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    // try {} catch{}로 오류 처리 해주기\n    // GET요청 관련 fetch\n    try {\n      const response = await fetch(\n        \"https://udemy-react-http-77f19-default-rtdb.firebaseio.com/movies.json\"\n      ); // firebase 링크끝에 /movies.json이라고 추가함\n      if (!response.ok) {\n        throw new Error(\"Something went wrong\");\n      }\n      const data = await response.json();\n\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate,\n        });\n      }\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message); // \"Something went wrong\"\n    }\n    setIsLoading(false);\n  }, []);\n\n  // 최초 로딩 시 영화 리스트 보이도록 함\n  // 의존성 배열에 [fetchMoviesHandler]을 넣어주면 변화가 있을때마다 업데이트가 될수 있는 반면 infinite loop를 만들게 될수도 있다.\n  // 이를 방지하기 위해 useCallback을 사용한다\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  // POST 요청 관련 fetch\n  async function addMovieHandler(movie) {\n    const response = await fetch(\n      \"https://udemy-react-http-77f19-default-rtdb.firebaseio.com/movies.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(movie),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data); // 결과값: {name: '-N9a7yhrMvCi1GK_E4-1'} // firebase에서 정한 아이디\n  }\n\n  // -----1. useCallback 사용하지 않은 경우!\n  // async function fetchMoviesHandler() {\n  //   setIsLoading(true);\n  //   setError(null);\n\n  //   // try {} catch{}로 오류 처리 해주기\n  //   try {\n  //     const response = await fetch(\"https://swapi.dev/api/films\");\n  //     if (!response.ok) {\n  //       throw new Error(\"Something went wrong\");\n  //     }\n  //     const data = await response.json();\n\n  //     const transformedMovies = data.results.map((movieData) => {\n  //       return {\n  //         id: movieData.episode_id,\n  //         title: movieData.title,\n  //         openingText: movieData.opening_crawl,\n  //         releaseDate: movieData.release_date,\n  //       };\n  //     });\n  //     setMovies(transformedMovies);\n  //   } catch (error) {\n  //     setError(error.message); // \"Something went wrong\"\n  //   }\n  //   setIsLoading(false);\n  // }\n\n  //---------.then 사용한 경우\n  // function fetchMoviesHandler() {\n  //   // fetch('url', {method:GET}) 두번째 인자의 디폴트 값이 GET이므로 여기서는 굳이 쓸 필요가 없음\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       //https://swapi.dev/api/films 여기서 제공하는 프로퍼티명이랑 Movie.js에서 props뒤에 쓴 형식이 다름. fetch로 받아올때 Movie.js에서 쓰인 형식으로 바꿔서 받아오는 처리 해주기!\n  //       const transformedMovies = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovies(transformedMovies);\n  //     });\n  // }\n\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n\n  let content = <p>Found no movies</p>;\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}